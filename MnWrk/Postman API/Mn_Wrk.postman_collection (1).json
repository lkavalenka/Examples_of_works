{
	"info": {
		"_postman_id": "70e11aa7-c987-46b2-8659-4958ee64034a",
		"name": "Mn_Wrk",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive tests",
			"item": [
				{
					"name": "Create new postal adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//set up id from enviroments\r",
									"const jsonData = pm.response.json()\r",
									"pm.environment.set(\"id\",jsonData.id)\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 2048B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2048);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Length\",\"45\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct Key 'id'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
									"});\r",
									"\r",
									"if(responseCode.code === 200){\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"ID is correct\", function () { \r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));\r",
									"});\r",
									"     \r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"//var jsonData = JSON.parse(responseBody);\r",
									"//postman.setEnviromentVariable(\"id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"id\");\r",
									"pm.environment.unset(\"company\");\r",
									"pm.environment.unset(\"zipCode\");\r",
									"pm.environment.unset(\"addressLine1\");\r",
									"pm.environment.unset(\"addressLine2\");\r",
									"pm.environment.unset(\"firstName\");\r",
									"pm.environment.unset(\"lastName\");\r",
									"pm.environment.unset(\"city\");\r",
									"pm.environment.unset(\"country\");\r",
									"pm.environment.unset(\"phoneNumber\");\r",
									"pm.environment.unset(\"subdivision\");\r",
									"pm.environment.unset(\"location\");\r",
									"\r",
									"\r",
									"// return a random integer from 10000 to 90000 with 5 digits\r",
									"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000)\r",
									"\r",
									"// return a random integer from 100 to 900 with 3 digits\r",
									"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100)\r",
									"\r",
									"const stateAbbriviations = [\r",
									"'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									"'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									"'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									"'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									"'VT','VI','VA','WA','WV','WI','WY'  \r",
									"];\r",
									"const randomState = stateAbbriviations[Math.floor(Math.random() * stateAbbriviations.length)];\r",
									"\r",
									"pm.environment.set(\"subdivision\", randomState);\r",
									"\r",
									"\r",
									"let fname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"pm.environment.set(\"firstName\", fname);\r",
									"\r",
									"let lname = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"lastName\", lname);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"company\", company);\r",
									"\r",
									"let addressLine1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"addressLine1\", addressLine1);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"city\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"country\", country);\r",
									"\r",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"phoneNumber\", phoneNumber);\r",
									"\r",
									"let location = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"location\", location);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{firstName}}\",\r\n            \"lastName\": \"{{lastName}}\"\r\n        },\r\n        \"company\": null,\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"{{addressLine2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{city}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"subdivision\": \"{{subdivision}}\",\r\n        \"zipCode\": \"{{zipCode}}\",\r\n        \"phoneNumber\": \"{{phoneNumber}}\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check all adresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\",\"chunked\");\r",
									"    pm.response.to.have.header(\"content-encoding\",\"gzip\");\r",
									"    pm.response.to.have.header(\"vary\",\"Accept-Encoding\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 Ok. The request has succeeded.\"] = true;\r",
									"        break;\r",
									"    case 404:\r",
									"        tests[\"404 Not found\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Unautorized\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 Internal server Error\"] = false;\r",
									"        break;\r",
									"    case 503:\r",
									"        tests[\"503 Service unavailable\"] = false;\r",
									"        break;\r",
									"    case 502:\r",
									"        tests[\"502 Bad gateway\"] = false;\r",
									"        break;\r",
									"    case 599:\r",
									"        tests[\"599 Network connect timeout error\"] = false;\r",
									"        break;\r",
									"    case 408:\r",
									"        tests[\"408 request timedout\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}   \r",
									"\r",
									"//check specific ID\r",
									"pm.test(\"new ID is in response\", function () { \r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"id\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));\r",
									"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));\r",
									"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));\r",
									"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));\r",
									"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));\r",
									"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));\r",
									"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));\r",
									"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));\r",
									"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"id\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check update adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Content-Length\",\"2\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body contains {}\", function () {\r",
									"    pm.response.to.have.body(\"{}\");\r",
									"});\r",
									"  \r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.unset(\"company\");\r",
									"pm.environment.unset(\"zipCode\");\r",
									"pm.environment.unset(\"addressLine1\");\r",
									"pm.environment.unset(\"addressLine2\");\r",
									"pm.environment.unset(\"firstName\");\r",
									"pm.environment.unset(\"lastName\");\r",
									"pm.environment.unset(\"city\");\r",
									"pm.environment.unset(\"country\");\r",
									"pm.environment.unset(\"phoneNumber\");\r",
									"pm.environment.unset(\"subdivision\");\r",
									"pm.environment.unset(\"location\");\r",
									"\r",
									"\r",
									"// return a random integer from 10000 to 90000 with 5 digits\r",
									"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000)\r",
									"\r",
									"// return a random integer from 100 to 900 with 3 digits\r",
									"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100)\r",
									"\r",
									"const stateAbbriviations = [\r",
									"'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									"'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									"'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									"'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									"'VT','VI','VA','WA','WV','WI','WY'  \r",
									"];\r",
									"const randomState = stateAbbriviations[Math.floor(Math.random() * stateAbbriviations.length)];\r",
									"\r",
									"pm.environment.set(\"subdivision\", randomState);\r",
									"\r",
									"\r",
									"let fname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"pm.environment.set(\"firstName\", fname);\r",
									"\r",
									"let lname = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"lastName\", lname);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"company\", company);\r",
									"\r",
									"let addressLine1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"addressLine1\", addressLine1);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"city\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"country\", country);\r",
									"\r",
									"let phoneNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"phoneNumber\", phoneNumber);\r",
									"\r",
									"let location = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"location\", location);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"id\": \"{{id}}\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{firstName}}\",\r\n            \"lastName\": \"{{lastName}}\"\r\n        },\r\n        \"company\": \"{{company}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"{{addressLine2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{city}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"subdivision\": \"{{subdivision}}\",\r\n        \"zipCode\": \"{{zipCode}}\",\r\n        \"phoneNumber\": \"{{phoneNumber}}\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": false,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"subdivision\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"  \r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));\r",
									"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));\r",
									"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));\r",
									"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));\r",
									"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));\r",
									"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));\r",
									"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));\r",
									"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));\r",
									"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Name of company is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"{{id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delet created adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"if(responseCode.code === 200){\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"id\": \"9abe92bd-3e8a-4363-b207-418c94eeb21e\",\r\n        \"fullName\": {\r\n            \"firstName\": \"Coral\",\r\n            \"lastName\": \"Davis\"\r\n        },\r\n        \"company\": \"SweetCompani\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"26000 Richmond Road\",\r\n        \"addressLine2\": \"apt303\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"Bedford\",\r\n        \"country\": \"USA\",\r\n        \"subdivision\": \"OH\",\r\n        \"zipCode\": \"44146\",\r\n        \"phoneNumber\": \"2021231234\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": false,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"subdivision\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"{{id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delet deleted account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 400){\r",
									"    tests[\"Code 400 is correct in this case\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 200) {\r",
									"    tests[\"Code 200 is bug in this case\"] = false;  \r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Content-Length\",\"191\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"{{id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"  \r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"if(responseCode.code === 400){\r",
									"    tests[\"Code 400 is correct in this case\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 200) {\r",
									"    tests[\"Code 200 is bug in this case\"] = false;  \r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Massage is include preveously deleted ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"id\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Message details ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"{{id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "Create new postal adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 2048B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2048);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Length\",\"45\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct Key 'id'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
									"});\r",
									"\r",
									"if(responseCode.code === 200){\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									"     \r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"//var jsonData = JSON.parse(responseBody);\r",
									"//postman.setEnviromentVariable(\"id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"...\",\r\n            \"lastName\": \"...\"\r\n        },\r\n        \"company\": null,\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": null,\r\n        \"addressLine2\": null,\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": null,\r\n        \"country\": \"USA\",\r\n        \"subdivision\": null,\r\n        \"zipCode\": null,\r\n        \"phoneNumber\": \"0000000000\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check created adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct Values\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"USA\");\r",
									"    pm.expect(pm.response.text()).to.include(\"...\");\r",
									"    pm.expect(pm.response.text()).to.include(\"0000000000\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct Keys\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"country\");\r",
									"    pm.expect(pm.response.text()).to.include(\"phoneNumber\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/ec2dd580-8bfb-4922-b9d5-c52a94d70e34",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"ec2dd580-8bfb-4922-b9d5-c52a94d70e34"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check update adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Content-Length\",\"2\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body contains {}\", function () {\r",
									"    pm.response.to.have.body(\"{}\");\r",
									"});\r",
									"  \r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"id\": \"8ae5d20f-9da1-4246-973d-654bba527929\",\r\n        \"fullName\": {\r\n            \"firstName\": \"1\",\r\n            \"lastName\": \"1\"\r\n        },\r\n        \"company\": null,\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": null,\r\n        \"addressLine2\": null,\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": null,\r\n        \"country\": \"USA\",\r\n        \"subdivision\": null,\r\n        \"zipCode\": null,\r\n        \"phoneNumber\": \"0000000000\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": false,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"country\",\r\n            \"phoneNumber\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/ec2dd580-8bfb-4922-b9d5-c52a94d70e34",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"ec2dd580-8bfb-4922-b9d5-c52a94d70e34"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updated adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct Values\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"USA\");\r",
									"    pm.expect(pm.response.text()).to.include(\"1\");\r",
									"    pm.expect(pm.response.text()).to.include(\"0000000000\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct Keys\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"country\");\r",
									"    pm.expect(pm.response.text()).to.include(\"phoneNumber\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/ec2dd580-8bfb-4922-b9d5-c52a94d70e34",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"ec2dd580-8bfb-4922-b9d5-c52a94d70e34"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delet created adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"if(responseCode.code === 200){\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 400) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"id\": \"9abe92bd-3e8a-4363-b207-418c94eeb21e\",\r\n        \"fullName\": {\r\n            \"firstName\": \"Coral\",\r\n            \"lastName\": \"Davis\"\r\n        },\r\n        \"company\": \"SweetCompani\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"26000 Richmond Road\",\r\n        \"addressLine2\": \"apt303\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"Bedford\",\r\n        \"country\": \"USA\",\r\n        \"subdivision\": \"OH\",\r\n        \"zipCode\": \"44146\",\r\n        \"phoneNumber\": \"2021231234\",\r\n        \"location\": null\r\n    },\r\n    \"setAsDefault\": false,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"subdivision\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/ec2dd580-8bfb-4922-b9d5-c52a94d70e34",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"ec2dd580-8bfb-4922-b9d5-c52a94d70e34"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delet deleted account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 400){\r",
									"    tests[\"Code 400 is correct in this case\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 200) {\r",
									"    tests[\"Code 200 is bug in this case\"] = false;  \r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Content-Length\",\"191\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/ec2dd580-8bfb-4922-b9d5-c52a94d70e34",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"ec2dd580-8bfb-4922-b9d5-c52a94d70e34"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
									"});\r",
									"  \r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\",\"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\",\"Pepyaka/1.15.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\",\"nosniff\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response should be okay to process\", function (){\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"if(responseCode.code === 400){\r",
									"    tests[\"Code 400 is correct in this case\"] = true;\r",
									"} else if (responseCode.code === 401) {\r",
									"    tests[\"Not autorised, Check access token or log in\"] = false;\r",
									"} else if (responseCode.code === 200) {\r",
									"    tests[\"Code 200 is bug in this case\"] = false;  \r",
									"} else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"} else if (responseCode.code === 404) {\r",
									"    tests[\"Not found. Check if you made correct request\"] = false;\r",
									"} else if (responseCode.code === 422) {\r",
									"    tests [\"The instance is not valid\"] = false;\r",
									"} else {\r",
									"    tests[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Massage is include preveously deleted ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"id\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct Keys\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"    pm.expect(pm.response.text()).to.include(\"details\");\r",
									"    pm.expect(pm.response.text()).to.include(\"cant_find\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/ec2dd580-8bfb-4922-b9d5-c52a94d70e34",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								"ec2dd580-8bfb-4922-b9d5-c52a94d70e34"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "au",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}